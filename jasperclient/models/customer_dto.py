# coding: utf-8

"""
    Cisco IoT Control Center API

    A Python client for the Cisco IoT Control Center (Jasper) REST API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from jasperclient.models.customer_dto_billing_address import CustomerDTOBillingAddress
from typing import Optional, Set
from typing_extensions import Self

class CustomerDTO(BaseModel):
    """
    CustomerDTO
    """ # noqa: E501
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=60)]] = None
    account_name: Optional[StrictStr] = Field(default=None, alias="accountName")
    security_question: Optional[Annotated[str, Field(min_length=10, strict=True, max_length=100)]] = Field(default=None, alias="securityQuestion")
    security_answer: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=100)]] = Field(default=None, alias="securityAnswer")
    ship_to_bill_address: Optional[StrictBool] = Field(default=False, alias="shipToBillAddress")
    contacts: Optional[List[Any]] = None
    billing_address: Optional[CustomerDTOBillingAddress] = Field(default=None, alias="billingAddress")
    shipping_address: Optional[CustomerDTOBillingAddress] = Field(default=None, alias="shippingAddress")
    __properties: ClassVar[List[str]] = ["name", "accountName", "securityQuestion", "securityAnswer", "shipToBillAddress", "contacts", "billingAddress", "shippingAddress"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^*,]+$", value):
            raise ValueError(r"must validate the regular expression /^[^*,]+$/")
        return value

    @field_validator('security_question')
    def security_question_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^*,]+$", value):
            raise ValueError(r"must validate the regular expression /^[^*,]+$/")
        return value

    @field_validator('security_answer')
    def security_answer_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^*,]+$", value):
            raise ValueError(r"must validate the regular expression /^[^*,]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billingAddress'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shippingAddress'] = self.shipping_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "accountName": obj.get("accountName"),
            "securityQuestion": obj.get("securityQuestion"),
            "securityAnswer": obj.get("securityAnswer"),
            "shipToBillAddress": obj.get("shipToBillAddress") if obj.get("shipToBillAddress") is not None else False,
            "contacts": obj.get("contacts"),
            "billingAddress": CustomerDTOBillingAddress.from_dict(obj["billingAddress"]) if obj.get("billingAddress") is not None else None,
            "shippingAddress": CustomerDTOBillingAddress.from_dict(obj["shippingAddress"]) if obj.get("shippingAddress") is not None else None
        })
        return _obj


