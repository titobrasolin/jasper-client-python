# coding: utf-8

"""
Cisco IoT Control Center API

A Python client for the Cisco IoT Control Center (Jasper) REST API.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class DeviceDetails(BaseModel):
    """
    DeviceDetails
    """  # noqa: E501

    iccid: Optional[StrictStr] = Field(
        default=None, description="The ICCID of the device."
    )
    imsi: Optional[StrictStr] = Field(default=None, description="The device IMSI.")
    msisdn: Optional[StrictStr] = Field(
        default=None, description="The device MSISDN or phone number."
    )
    imei: Optional[StrictStr] = Field(default=None, description="The device IMEI.")
    status: Optional[StrictStr] = Field(
        default=None, description="The device SIM status."
    )
    rate_plan: Optional[StrictStr] = Field(
        default=None,
        description="The name of the rate plan associated with the device.",
        alias="ratePlan",
    )
    communication_plan: Optional[StrictStr] = Field(
        default=None,
        description="The name of the communication plan associated with the device.",
        alias="communicationPlan",
    )
    customer: Optional[StrictStr] = Field(
        default=None,
        description="The name of the customer (generally an enterprise or business unit), if any, associated with this device.",
    )
    end_consumer_id: Optional[StrictStr] = Field(
        default=None,
        description="The ID of the person, if any, associated with this device.",
        alias="endConsumerId",
    )
    date_activated: Optional[datetime] = Field(
        default=None,
        description="The date when the device was first activated.",
        alias="dateActivated",
    )
    date_added: Optional[datetime] = Field(
        default=None,
        description="The date when the device was added.",
        alias="dateAdded",
    )
    date_updated: Optional[datetime] = Field(
        default=None,
        description="The date when the last device information update occurred.",
        alias="dateUpdated",
    )
    date_shipped: Optional[datetime] = Field(
        default=None,
        description="The date when the device SIM was transferred from the operator inventory into the enterprise account.",
        alias="dateShipped",
    )
    account_id: Optional[StrictStr] = Field(
        default=None,
        description="The ID of the enterprise account associated with the device.",
        alias="accountId",
    )
    fixed_ip_address: Optional[StrictStr] = Field(
        default=None,
        description="The IPv4 address assigned to the device. This field may be null if the device communication plan uses dynamic IP addresses or if the device uses an IPv6 address instead.",
        alias="fixedIPAddress",
    )
    fixed_ipv6_address: Optional[StrictStr] = Field(
        default=None,
        description="The IPv6 address assigned to the device. This field may be null if the device communication plan uses dynamic IP addresses or if the device uses an IPv4 address instead.",
        alias="fixedIpv6Address",
    )
    operator_custom1: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 1 created by the operator.",
        alias="operatorCustom1",
    )
    operator_custom2: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 2 created by the operator.",
        alias="operatorCustom2",
    )
    operator_custom3: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 3 created by the operator.",
        alias="operatorCustom3",
    )
    operator_custom4: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 4 created by the operator.",
        alias="operatorCustom4",
    )
    operator_custom5: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 5 created by the operator.",
        alias="operatorCustom5",
    )
    account_custom1: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 1 created by the enterprise.",
        alias="accountCustom1",
    )
    account_custom2: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 2 created by the enterprise.",
        alias="accountCustom2",
    )
    account_custom3: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 3 created by the enterprise.",
        alias="accountCustom3",
    )
    account_custom4: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 4 created by the enterprise.",
        alias="accountCustom4",
    )
    account_custom5: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 5 created by the enterprise.",
        alias="accountCustom5",
    )
    account_custom6: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 6 created by the enterprise.",
        alias="accountCustom6",
    )
    account_custom7: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 7 created by the enterprise.",
        alias="accountCustom7",
    )
    account_custom8: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 8 created by the enterprise.",
        alias="accountCustom8",
    )
    account_custom9: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 9 created by the enterprise.",
        alias="accountCustom9",
    )
    account_custom10: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 10 created by the enterprise.",
        alias="accountCustom10",
    )
    customer_custom1: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 1 created by the customer.",
        alias="customerCustom1",
    )
    customer_custom2: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 2 created by the customer.",
        alias="customerCustom2",
    )
    customer_custom3: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 3 created by the customer.",
        alias="customerCustom3",
    )
    customer_custom4: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 4 created by the customer.",
        alias="customerCustom4",
    )
    customer_custom5: Optional[StrictStr] = Field(
        default=None,
        description="Value for custom device field 5 created by the customer.",
        alias="customerCustom5",
    )
    sim_notes: Optional[StrictStr] = Field(
        default=None,
        description="Information the operator has added about the device.",
        alias="simNotes",
    )
    device_id: Optional[StrictStr] = Field(
        default=None,
        description="Optional identifier that an account or customer can give to a device.",
        alias="deviceID",
    )
    modem_id: Optional[StrictStr] = Field(
        default=None,
        description="Identifies the modem used by the device to transmit data.",
        alias="modemID",
    )
    global_sim_type: Optional[StrictStr] = Field(
        default=None,
        description="For enterprises taking advantage of Control Center's Global SIM feature, this value indicates whether the device is using a primary SIM from the lead operator or a virtual subscription from a partner operator.",
        alias="globalSimType",
    )
    eid: Optional[StrictStr] = Field(
        default=None,
        description="An eSIM identifier that associates a profile in Control Center with an eSIM.",
    )
    sim_profile_id: Optional[StrictStr] = Field(
        default=None,
        description="An identifier that defines the type of SIM provided by the manufacturer.",
        alias="simProfileId",
    )
    example: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = [
        "iccid",
        "imsi",
        "msisdn",
        "imei",
        "status",
        "ratePlan",
        "communicationPlan",
        "customer",
        "endConsumerId",
        "dateActivated",
        "dateAdded",
        "dateUpdated",
        "dateShipped",
        "accountId",
        "fixedIPAddress",
        "fixedIpv6Address",
        "operatorCustom1",
        "operatorCustom2",
        "operatorCustom3",
        "operatorCustom4",
        "operatorCustom5",
        "accountCustom1",
        "accountCustom2",
        "accountCustom3",
        "accountCustom4",
        "accountCustom5",
        "accountCustom6",
        "accountCustom7",
        "accountCustom8",
        "accountCustom9",
        "accountCustom10",
        "customerCustom1",
        "customerCustom2",
        "customerCustom3",
        "customerCustom4",
        "customerCustom5",
        "simNotes",
        "deviceID",
        "modemID",
        "globalSimType",
        "eid",
        "simProfileId",
        "example",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if customer (nullable) is None
        # and model_fields_set contains the field
        if self.customer is None and "customer" in self.model_fields_set:
            _dict["customer"] = None

        # set to None if end_consumer_id (nullable) is None
        # and model_fields_set contains the field
        if self.end_consumer_id is None and "end_consumer_id" in self.model_fields_set:
            _dict["endConsumerId"] = None

        # set to None if fixed_ip_address (nullable) is None
        # and model_fields_set contains the field
        if (
            self.fixed_ip_address is None
            and "fixed_ip_address" in self.model_fields_set
        ):
            _dict["fixedIPAddress"] = None

        # set to None if fixed_ipv6_address (nullable) is None
        # and model_fields_set contains the field
        if (
            self.fixed_ipv6_address is None
            and "fixed_ipv6_address" in self.model_fields_set
        ):
            _dict["fixedIpv6Address"] = None

        # set to None if sim_notes (nullable) is None
        # and model_fields_set contains the field
        if self.sim_notes is None and "sim_notes" in self.model_fields_set:
            _dict["simNotes"] = None

        # set to None if device_id (nullable) is None
        # and model_fields_set contains the field
        if self.device_id is None and "device_id" in self.model_fields_set:
            _dict["deviceID"] = None

        # set to None if eid (nullable) is None
        # and model_fields_set contains the field
        if self.eid is None and "eid" in self.model_fields_set:
            _dict["eid"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "iccid": obj.get("iccid"),
                "imsi": obj.get("imsi"),
                "msisdn": obj.get("msisdn"),
                "imei": obj.get("imei"),
                "status": obj.get("status"),
                "ratePlan": obj.get("ratePlan"),
                "communicationPlan": obj.get("communicationPlan"),
                "customer": obj.get("customer"),
                "endConsumerId": obj.get("endConsumerId"),
                "dateActivated": obj.get("dateActivated"),
                "dateAdded": obj.get("dateAdded"),
                "dateUpdated": obj.get("dateUpdated"),
                "dateShipped": obj.get("dateShipped"),
                "accountId": obj.get("accountId"),
                "fixedIPAddress": obj.get("fixedIPAddress"),
                "fixedIpv6Address": obj.get("fixedIpv6Address"),
                "operatorCustom1": obj.get("operatorCustom1"),
                "operatorCustom2": obj.get("operatorCustom2"),
                "operatorCustom3": obj.get("operatorCustom3"),
                "operatorCustom4": obj.get("operatorCustom4"),
                "operatorCustom5": obj.get("operatorCustom5"),
                "accountCustom1": obj.get("accountCustom1"),
                "accountCustom2": obj.get("accountCustom2"),
                "accountCustom3": obj.get("accountCustom3"),
                "accountCustom4": obj.get("accountCustom4"),
                "accountCustom5": obj.get("accountCustom5"),
                "accountCustom6": obj.get("accountCustom6"),
                "accountCustom7": obj.get("accountCustom7"),
                "accountCustom8": obj.get("accountCustom8"),
                "accountCustom9": obj.get("accountCustom9"),
                "accountCustom10": obj.get("accountCustom10"),
                "customerCustom1": obj.get("customerCustom1"),
                "customerCustom2": obj.get("customerCustom2"),
                "customerCustom3": obj.get("customerCustom3"),
                "customerCustom4": obj.get("customerCustom4"),
                "customerCustom5": obj.get("customerCustom5"),
                "simNotes": obj.get("simNotes"),
                "deviceID": obj.get("deviceID"),
                "modemID": obj.get("modemID"),
                "globalSimType": obj.get("globalSimType"),
                "eid": obj.get("eid"),
                "simProfileId": obj.get("simProfileId"),
                "example": obj.get("example"),
            }
        )
        return _obj
