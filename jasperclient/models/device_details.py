# coding: utf-8

"""
    Cisco IoT Control Center API

    A Python client for the Cisco IoT Control Center (Jasper) REST API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceDetails(BaseModel):
    """
    DeviceDetails
    """ # noqa: E501
    iccid: Optional[StrictStr] = Field(default=None, description="ICCID del dispositivo.")
    imsi: Optional[StrictStr] = Field(default=None, description="IMSI del dispositivo.")
    msisdn: Optional[StrictStr] = Field(default=None, description="MSISDN o numero di telefono del dispositivo.")
    imei: Optional[StrictStr] = Field(default=None, description="IMEI del dispositivo.")
    status: Optional[StrictStr] = Field(default=None, description="Stato SIM del dispositivo.")
    rate_plan: Optional[StrictStr] = Field(default=None, description="Nome del piano tariffario associato al dispositivo.", alias="ratePlan")
    communication_plan: Optional[StrictStr] = Field(default=None, description="Nome del piano di comunicazione associato al dispositivo.", alias="communicationPlan")
    customer: Optional[StrictStr] = Field(default=None, description="Nome del cliente (in genere un'azienda o una business unit), eventualmente associato a questo dispositivo.")
    end_consumer_id: Optional[StrictStr] = Field(default=None, description="ID della persona eventualmente associata a questo dispositivo.", alias="endConsumerId")
    date_activated: Optional[datetime] = Field(default=None, description="Data di attivazione del dispositivo.", alias="dateActivated")
    date_added: Optional[datetime] = Field(default=None, description="Data in cui il dispositivo è stato aggiunto.", alias="dateAdded")
    date_updated: Optional[datetime] = Field(default=None, description="Data in cui si ha avuto luogo l'ultimo aggiornamento delle informazioni relative al dispositivo.", alias="dateUpdated")
    date_shipped: Optional[datetime] = Field(default=None, description="Data in cui la SIM del dispositivo è stata trasferita dal magazzino del provider di servizi all'Account aziendale.", alias="dateShipped")
    account_id: Optional[StrictStr] = Field(default=None, description="ID dell'account aziendale eventualmente associato al dispositivo.", alias="accountId")
    fixed_ip_address: Optional[StrictStr] = Field(default=None, description="L'indirizzo IPv4 assegnato al dispositivo.", alias="fixedIPAddress")
    fixed_ipv6_address: Optional[StrictStr] = Field(default=None, description="L'indirizzo IPv6 assegnato al dispositivo.", alias="fixedIpv6Address")
    operator_custom1: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 1 del dispositivo creato dal provider di servizi.", alias="operatorCustom1")
    operator_custom2: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 2 del dispositivo creato dal provider di servizi.", alias="operatorCustom2")
    operator_custom3: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 3 del dispositivo creato dal provider di servizi.", alias="operatorCustom3")
    operator_custom4: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 4 del dispositivo creato dal provider di servizi.", alias="operatorCustom4")
    operator_custom5: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 5 del dispositivo creato dal provider di servizi.", alias="operatorCustom5")
    account_custom1: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 1 del dispositivo creato dall'azienda.", alias="accountCustom1")
    account_custom2: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 2 del dispositivo creato dall'azienda.", alias="accountCustom2")
    account_custom3: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 3 del dispositivo creato dall'azienda.", alias="accountCustom3")
    account_custom4: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 4 del dispositivo creato dall'azienda.", alias="accountCustom4")
    account_custom5: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 5 del dispositivo creato dall'azienda.", alias="accountCustom5")
    account_custom6: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 6 del dispositivo creato dall'azienda.", alias="accountCustom6")
    account_custom7: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 7 del dispositivo creato dall'azienda.", alias="accountCustom7")
    account_custom8: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 8 del dispositivo creato dall'azienda.", alias="accountCustom8")
    account_custom9: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 9 del dispositivo creato dall'azienda.", alias="accountCustom9")
    account_custom10: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 10 del dispositivo creato dall'azienda.", alias="accountCustom10")
    customer_custom1: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 1 del dispositivo creato dal cliente.", alias="customerCustom1")
    customer_custom2: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 2 del dispositivo creato dal cliente.", alias="customerCustom2")
    customer_custom3: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 3 del dispositivo creato dal cliente.", alias="customerCustom3")
    customer_custom4: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 4 del dispositivo creato dal cliente.", alias="customerCustom4")
    customer_custom5: Optional[StrictStr] = Field(default=None, description="Valore per il campo personalizzato 5 del dispositivo creato dal cliente.", alias="customerCustom5")
    sim_notes: Optional[StrictStr] = Field(default=None, description="Informazioni che il provider di servizi ha aggiunto sul dispositivo.", alias="simNotes")
    device_id: Optional[StrictStr] = Field(default=None, description="Identificatore facoltativo che un account o un cliente può assegnare a un dispositivo.", alias="deviceID")
    modem_id: Optional[StrictStr] = Field(default=None, description="Identifica il modem utilizzato dal dispositivo per trasmettere dati.", alias="modemID")
    global_sim_type: Optional[StrictStr] = Field(default=None, description="Indica se il dispositivo utilizza una SIM principale o una sottoscrizione virtuale di un partner (per funzionalità Global SIM).", alias="globalSimType")
    eid: Optional[StrictStr] = Field(default=None, description="Identificatore eSIM che associa un profilo in Control Center con un'eSIM.")
    sim_profile_id: Optional[StrictStr] = Field(default=None, description="Un identificativo che definisce il tipo di SIM fornito dal produttore.", alias="simProfileId")
    __properties: ClassVar[List[str]] = ["iccid", "imsi", "msisdn", "imei", "status", "ratePlan", "communicationPlan", "customer", "endConsumerId", "dateActivated", "dateAdded", "dateUpdated", "dateShipped", "accountId", "fixedIPAddress", "fixedIpv6Address", "operatorCustom1", "operatorCustom2", "operatorCustom3", "operatorCustom4", "operatorCustom5", "accountCustom1", "accountCustom2", "accountCustom3", "accountCustom4", "accountCustom5", "accountCustom6", "accountCustom7", "accountCustom8", "accountCustom9", "accountCustom10", "customerCustom1", "customerCustom2", "customerCustom3", "customerCustom4", "customerCustom5", "simNotes", "deviceID", "modemID", "globalSimType", "eid", "simProfileId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if customer (nullable) is None
        # and model_fields_set contains the field
        if self.customer is None and "customer" in self.model_fields_set:
            _dict['customer'] = None

        # set to None if end_consumer_id (nullable) is None
        # and model_fields_set contains the field
        if self.end_consumer_id is None and "end_consumer_id" in self.model_fields_set:
            _dict['endConsumerId'] = None

        # set to None if fixed_ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_ip_address is None and "fixed_ip_address" in self.model_fields_set:
            _dict['fixedIPAddress'] = None

        # set to None if fixed_ipv6_address (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_ipv6_address is None and "fixed_ipv6_address" in self.model_fields_set:
            _dict['fixedIpv6Address'] = None

        # set to None if sim_notes (nullable) is None
        # and model_fields_set contains the field
        if self.sim_notes is None and "sim_notes" in self.model_fields_set:
            _dict['simNotes'] = None

        # set to None if device_id (nullable) is None
        # and model_fields_set contains the field
        if self.device_id is None and "device_id" in self.model_fields_set:
            _dict['deviceID'] = None

        # set to None if eid (nullable) is None
        # and model_fields_set contains the field
        if self.eid is None and "eid" in self.model_fields_set:
            _dict['eid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "iccid": obj.get("iccid"),
            "imsi": obj.get("imsi"),
            "msisdn": obj.get("msisdn"),
            "imei": obj.get("imei"),
            "status": obj.get("status"),
            "ratePlan": obj.get("ratePlan"),
            "communicationPlan": obj.get("communicationPlan"),
            "customer": obj.get("customer"),
            "endConsumerId": obj.get("endConsumerId"),
            "dateActivated": obj.get("dateActivated"),
            "dateAdded": obj.get("dateAdded"),
            "dateUpdated": obj.get("dateUpdated"),
            "dateShipped": obj.get("dateShipped"),
            "accountId": obj.get("accountId"),
            "fixedIPAddress": obj.get("fixedIPAddress"),
            "fixedIpv6Address": obj.get("fixedIpv6Address"),
            "operatorCustom1": obj.get("operatorCustom1"),
            "operatorCustom2": obj.get("operatorCustom2"),
            "operatorCustom3": obj.get("operatorCustom3"),
            "operatorCustom4": obj.get("operatorCustom4"),
            "operatorCustom5": obj.get("operatorCustom5"),
            "accountCustom1": obj.get("accountCustom1"),
            "accountCustom2": obj.get("accountCustom2"),
            "accountCustom3": obj.get("accountCustom3"),
            "accountCustom4": obj.get("accountCustom4"),
            "accountCustom5": obj.get("accountCustom5"),
            "accountCustom6": obj.get("accountCustom6"),
            "accountCustom7": obj.get("accountCustom7"),
            "accountCustom8": obj.get("accountCustom8"),
            "accountCustom9": obj.get("accountCustom9"),
            "accountCustom10": obj.get("accountCustom10"),
            "customerCustom1": obj.get("customerCustom1"),
            "customerCustom2": obj.get("customerCustom2"),
            "customerCustom3": obj.get("customerCustom3"),
            "customerCustom4": obj.get("customerCustom4"),
            "customerCustom5": obj.get("customerCustom5"),
            "simNotes": obj.get("simNotes"),
            "deviceID": obj.get("deviceID"),
            "modemID": obj.get("modemID"),
            "globalSimType": obj.get("globalSimType"),
            "eid": obj.get("eid"),
            "simProfileId": obj.get("simProfileId")
        })
        return _obj


