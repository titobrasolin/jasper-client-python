# coding: utf-8

"""
Cisco IoT Control Center API

A Python client for the Cisco IoT Control Center (Jasper) REST API.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class CustomerDTOBillingAddress(BaseModel):
    """
    CustomerDTOBillingAddress
    """  # noqa: E501

    address_line1: Optional[
        Annotated[str, Field(min_length=0, strict=True, max_length=40)]
    ] = Field(default=None, alias="addressLine1")
    address_line2: Optional[
        Annotated[str, Field(min_length=0, strict=True, max_length=40)]
    ] = Field(default=None, alias="addressLine2")
    city: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=40)]] = (
        None
    )
    state: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=40)]] = (
        None
    )
    country: Optional[
        Annotated[str, Field(min_length=0, strict=True, max_length=100)]
    ] = None
    postal_code: Optional[
        Annotated[str, Field(min_length=0, strict=True, max_length=15)]
    ] = Field(default=None, alias="postalCode")
    __properties: ClassVar[List[str]] = [
        "addressLine1",
        "addressLine2",
        "city",
        "state",
        "country",
        "postalCode",
    ]

    @field_validator("address_line1")
    def address_line1_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^*,]+$", value):
            raise ValueError(r"must validate the regular expression /^[^*,]+$/")
        return value

    @field_validator("address_line2")
    def address_line2_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^*,]+$", value):
            raise ValueError(r"must validate the regular expression /^[^*,]+$/")
        return value

    @field_validator("city")
    def city_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^*,]+$", value):
            raise ValueError(r"must validate the regular expression /^[^*,]+$/")
        return value

    @field_validator("state")
    def state_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^*,]+$", value):
            raise ValueError(r"must validate the regular expression /^[^*,]+$/")
        return value

    @field_validator("country")
    def country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^*,]+$", value):
            raise ValueError(r"must validate the regular expression /^[^*,]+$/")
        return value

    @field_validator("postal_code")
    def postal_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^*,]+$", value):
            raise ValueError(r"must validate the regular expression /^[^*,]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerDTOBillingAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerDTOBillingAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "addressLine1": obj.get("addressLine1"),
                "addressLine2": obj.get("addressLine2"),
                "city": obj.get("city"),
                "state": obj.get("state"),
                "country": obj.get("country"),
                "postalCode": obj.get("postalCode"),
            }
        )
        return _obj
