# coding: utf-8

"""
    Cisco IoT Control Center API

    A Python client for the Cisco IoT Control Center (Jasper) REST API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceEditModel(BaseModel):
    """
    DeviceEditModel
    """ # noqa: E501
    effective_date: Optional[datetime] = Field(default=None, alias="effectiveDate")
    rate_plan: Optional[StrictStr] = Field(default=None, alias="ratePlan")
    communication_plan: Optional[StrictStr] = Field(default=None, alias="communicationPlan")
    status: Optional[StrictStr] = None
    customer: Optional[StrictStr] = None
    device_id: Optional[StrictStr] = Field(default=None, alias="deviceID")
    modem_id: Optional[StrictStr] = Field(default=None, alias="modemID")
    overage_limit_override: Optional[StrictStr] = Field(default=None, alias="overageLimitOverride")
    operator_custom1: Optional[StrictStr] = Field(default=None, alias="operatorCustom1")
    operator_custom2: Optional[StrictStr] = Field(default=None, alias="operatorCustom2")
    operator_custom3: Optional[StrictStr] = Field(default=None, alias="operatorCustom3")
    operator_custom4: Optional[StrictStr] = Field(default=None, alias="operatorCustom4")
    operator_custom5: Optional[StrictStr] = Field(default=None, alias="operatorCustom5")
    account_custom1: Optional[StrictStr] = Field(default=None, alias="accountCustom1")
    account_custom2: Optional[StrictStr] = Field(default=None, alias="accountCustom2")
    account_custom3: Optional[StrictStr] = Field(default=None, alias="accountCustom3")
    account_custom4: Optional[StrictStr] = Field(default=None, alias="accountCustom4")
    account_custom5: Optional[StrictStr] = Field(default=None, alias="accountCustom5")
    account_custom6: Optional[StrictStr] = Field(default=None, alias="accountCustom6")
    account_custom7: Optional[StrictStr] = Field(default=None, alias="accountCustom7")
    account_custom8: Optional[StrictStr] = Field(default=None, alias="accountCustom8")
    account_custom9: Optional[StrictStr] = Field(default=None, alias="accountCustom9")
    account_custom10: Optional[StrictStr] = Field(default=None, alias="accountCustom10")
    customer_custom1: Optional[StrictStr] = Field(default=None, alias="customerCustom1")
    customer_custom2: Optional[StrictStr] = Field(default=None, alias="customerCustom2")
    customer_custom3: Optional[StrictStr] = Field(default=None, alias="customerCustom3")
    customer_custom4: Optional[StrictStr] = Field(default=None, alias="customerCustom4")
    customer_custom5: Optional[StrictStr] = Field(default=None, alias="customerCustom5")
    ipv4_address: Optional[StrictStr] = Field(default=None, alias="ipv4Address")
    ipv6_address: Optional[StrictStr] = Field(default=None, alias="ipv6Address")
    __properties: ClassVar[List[str]] = ["effectiveDate", "ratePlan", "communicationPlan", "status", "customer", "deviceID", "modemID", "overageLimitOverride", "operatorCustom1", "operatorCustom2", "operatorCustom3", "operatorCustom4", "operatorCustom5", "accountCustom1", "accountCustom2", "accountCustom3", "accountCustom4", "accountCustom5", "accountCustom6", "accountCustom7", "accountCustom8", "accountCustom9", "accountCustom10", "customerCustom1", "customerCustom2", "customerCustom3", "customerCustom4", "customerCustom5", "ipv4Address", "ipv6Address"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceEditModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceEditModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "effectiveDate": obj.get("effectiveDate"),
            "ratePlan": obj.get("ratePlan"),
            "communicationPlan": obj.get("communicationPlan"),
            "status": obj.get("status"),
            "customer": obj.get("customer"),
            "deviceID": obj.get("deviceID"),
            "modemID": obj.get("modemID"),
            "overageLimitOverride": obj.get("overageLimitOverride"),
            "operatorCustom1": obj.get("operatorCustom1"),
            "operatorCustom2": obj.get("operatorCustom2"),
            "operatorCustom3": obj.get("operatorCustom3"),
            "operatorCustom4": obj.get("operatorCustom4"),
            "operatorCustom5": obj.get("operatorCustom5"),
            "accountCustom1": obj.get("accountCustom1"),
            "accountCustom2": obj.get("accountCustom2"),
            "accountCustom3": obj.get("accountCustom3"),
            "accountCustom4": obj.get("accountCustom4"),
            "accountCustom5": obj.get("accountCustom5"),
            "accountCustom6": obj.get("accountCustom6"),
            "accountCustom7": obj.get("accountCustom7"),
            "accountCustom8": obj.get("accountCustom8"),
            "accountCustom9": obj.get("accountCustom9"),
            "accountCustom10": obj.get("accountCustom10"),
            "customerCustom1": obj.get("customerCustom1"),
            "customerCustom2": obj.get("customerCustom2"),
            "customerCustom3": obj.get("customerCustom3"),
            "customerCustom4": obj.get("customerCustom4"),
            "customerCustom5": obj.get("customerCustom5"),
            "ipv4Address": obj.get("ipv4Address"),
            "ipv6Address": obj.get("ipv6Address")
        })
        return _obj


