# coding: utf-8

"""
Cisco IoT Control Center API

A Python client for the Cisco IoT Control Center (Jasper) REST API.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated

from jasperclient.api_client import ApiClient, RequestSerialized
from jasperclient.api_response import ApiResponse
from jasperclient.rest import RESTResponseType


class GetDeviceLocationHistoryApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def get_device_location_history(
        self,
        iccid: Annotated[StrictStr, Field(description="ICCID of the device")],
        api_version: Annotated[StrictStr, Field(description="Defaults to 1")],
        from_date: Annotated[
            Optional[StrictStr],
            Field(
                description="If this is not specified, most recent 2 location records will be returned. </br> The format is yyyy-MM-ddTHH:mm:ssZ </br> Eg: 2018-07-18T17:31:34+00:00"
            ),
        ] = None,
        to_date: Annotated[
            Optional[StrictStr],
            Field(
                description="If this is not specified, location history up until the current date will be returned. </br> The format is yyyy-MM-ddTHH:mm:ssZ </br> Eg: 2018-07-18T17:31:34+00:00"
            ),
        ] = None,
        page_size: Annotated[
            Optional[StrictInt], Field(description="Maximum of 50, defaults to 50")
        ] = None,
        page_number: Annotated[
            Optional[StrictInt], Field(description="Defaults to 1")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get Device Location History during a specified time frame.



        :param iccid: ICCID of the device (required)
        :type iccid: str
        :param api_version: Defaults to 1 (required)
        :type api_version: str
        :param from_date: If this is not specified, most recent 2 location records will be returned. </br> The format is yyyy-MM-ddTHH:mm:ssZ </br> Eg: 2018-07-18T17:31:34+00:00
        :type from_date: str
        :param to_date: If this is not specified, location history up until the current date will be returned. </br> The format is yyyy-MM-ddTHH:mm:ssZ </br> Eg: 2018-07-18T17:31:34+00:00
        :type to_date: str
        :param page_size: Maximum of 50, defaults to 50
        :type page_size: int
        :param page_number: Defaults to 1
        :type page_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_device_location_history_serialize(
            iccid=iccid,
            api_version=api_version,
            from_date=from_date,
            to_date=to_date,
            page_size=page_size,
            page_number=page_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "400": None,
            "401": None,
            "404": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_device_location_history_with_http_info(
        self,
        iccid: Annotated[StrictStr, Field(description="ICCID of the device")],
        api_version: Annotated[StrictStr, Field(description="Defaults to 1")],
        from_date: Annotated[
            Optional[StrictStr],
            Field(
                description="If this is not specified, most recent 2 location records will be returned. </br> The format is yyyy-MM-ddTHH:mm:ssZ </br> Eg: 2018-07-18T17:31:34+00:00"
            ),
        ] = None,
        to_date: Annotated[
            Optional[StrictStr],
            Field(
                description="If this is not specified, location history up until the current date will be returned. </br> The format is yyyy-MM-ddTHH:mm:ssZ </br> Eg: 2018-07-18T17:31:34+00:00"
            ),
        ] = None,
        page_size: Annotated[
            Optional[StrictInt], Field(description="Maximum of 50, defaults to 50")
        ] = None,
        page_number: Annotated[
            Optional[StrictInt], Field(description="Defaults to 1")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get Device Location History during a specified time frame.



        :param iccid: ICCID of the device (required)
        :type iccid: str
        :param api_version: Defaults to 1 (required)
        :type api_version: str
        :param from_date: If this is not specified, most recent 2 location records will be returned. </br> The format is yyyy-MM-ddTHH:mm:ssZ </br> Eg: 2018-07-18T17:31:34+00:00
        :type from_date: str
        :param to_date: If this is not specified, location history up until the current date will be returned. </br> The format is yyyy-MM-ddTHH:mm:ssZ </br> Eg: 2018-07-18T17:31:34+00:00
        :type to_date: str
        :param page_size: Maximum of 50, defaults to 50
        :type page_size: int
        :param page_number: Defaults to 1
        :type page_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_device_location_history_serialize(
            iccid=iccid,
            api_version=api_version,
            from_date=from_date,
            to_date=to_date,
            page_size=page_size,
            page_number=page_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "400": None,
            "401": None,
            "404": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_device_location_history_without_preload_content(
        self,
        iccid: Annotated[StrictStr, Field(description="ICCID of the device")],
        api_version: Annotated[StrictStr, Field(description="Defaults to 1")],
        from_date: Annotated[
            Optional[StrictStr],
            Field(
                description="If this is not specified, most recent 2 location records will be returned. </br> The format is yyyy-MM-ddTHH:mm:ssZ </br> Eg: 2018-07-18T17:31:34+00:00"
            ),
        ] = None,
        to_date: Annotated[
            Optional[StrictStr],
            Field(
                description="If this is not specified, location history up until the current date will be returned. </br> The format is yyyy-MM-ddTHH:mm:ssZ </br> Eg: 2018-07-18T17:31:34+00:00"
            ),
        ] = None,
        page_size: Annotated[
            Optional[StrictInt], Field(description="Maximum of 50, defaults to 50")
        ] = None,
        page_number: Annotated[
            Optional[StrictInt], Field(description="Defaults to 1")
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Device Location History during a specified time frame.



        :param iccid: ICCID of the device (required)
        :type iccid: str
        :param api_version: Defaults to 1 (required)
        :type api_version: str
        :param from_date: If this is not specified, most recent 2 location records will be returned. </br> The format is yyyy-MM-ddTHH:mm:ssZ </br> Eg: 2018-07-18T17:31:34+00:00
        :type from_date: str
        :param to_date: If this is not specified, location history up until the current date will be returned. </br> The format is yyyy-MM-ddTHH:mm:ssZ </br> Eg: 2018-07-18T17:31:34+00:00
        :type to_date: str
        :param page_size: Maximum of 50, defaults to 50
        :type page_size: int
        :param page_number: Defaults to 1
        :type page_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_device_location_history_serialize(
            iccid=iccid,
            api_version=api_version,
            from_date=from_date,
            to_date=to_date,
            page_size=page_size,
            page_number=page_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "400": None,
            "401": None,
            "404": None,
            "500": None,
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_device_location_history_serialize(
        self,
        iccid,
        api_version,
        from_date,
        to_date,
        page_size,
        page_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if iccid is not None:
            _path_params["iccid"] = iccid
        if api_version is not None:
            _path_params["apiVersion"] = api_version
        # process the query parameters
        if from_date is not None:

            _query_params.append(("fromDate", from_date))

        if to_date is not None:

            _query_params.append(("toDate", to_date))

        if page_size is not None:

            _query_params.append(("pageSize", page_size))

        if page_number is not None:

            _query_params.append(("pageNumber", page_number))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = ["basicAuth"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v{apiVersion}/devices/{iccid}/locationHistory",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
